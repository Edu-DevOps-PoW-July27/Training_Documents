	Version Control System Using GIT :::::
	
	
	Continuous Development :::
	
		Version Control System :::
	
			Web application:
			
			<html>
			---
			-
			-
			-
			-
			-
			</html>
			
			save this file as index.html 
			Testing 
			
			<html>
			---
			-asdf
			-asdfasdf
			-
			-asdfsdf
			-
			</html>
			
			save as index.html
			test 
			
			
			Version Control System 
			
			index.html 			index.html_V1.0 (Tag/Version_no/Commit_id)
			index.html 			index.html_V1.1
			index.html 			index.html_V1.2
			index.html 			index.html_V1.3
			index.html 			index.html_V1.4
			
				- It is used to version control the source code changes
				- It is used to track the source code changes 
				
		Type of Version Control System :
		
			- Local VCS 
			- Centralized VCS 
			- Distributed VCS
			
			
		GIT ::
		
			- Is a open source Distributed VCS 
			- Used to Version Control the Changes 
			- Used to Track the Changes 
			- Used to Perform Parallel Development (Using Branching Techniques)
			
		GITHUB	- Remote Server used to maintain the remote git repositories (GUI Based)

		GIT 	- git client installed in the local machine to version control the changes - Comman Line Utility
		
		
		Repository -> Is a collection of files and folders 
		
		Azure Repo 
		AWS Code Commit 
		gitlab
		bitbucket 
		
		GITHUB 		- Create GITHUB Account 
		
		git client 	- To be installed in the local Machine 
		
Next :

	GIT 

#######################
Day 2: 28th July 2024
#######################

	GIT :
	
	Install GIT Client in Local Machine 
	
	Working with GIT 
	
	Git file workflow 
	
	Git Misc. Commands 
	
	Git Branching Techniques
	
	Git Branching Strategies 
	
	Remote Repository
	
	Pre-Requisites :
		Lab Environments 
			AWS Cloud Platform to create VMs and install DevOps Tools
				- Create AWS Free Tier Account 
				
	Install GIT Client in Local Machine :::
	
		https://git-scm.com/downloads
		
		git --version 
		
		On Windows Machine :
		
			git bash
			git cmd 
			git gui
			

	
			
	Working with GIT ::::
	
	
	Developers' Workload ???
	
		- Enhancement Project / Bug fixing 		# Existing Project 
		
		- New Project 
	
	GIT File Work flow :
	
	Local Machine ::																Remote Server 
	
	Working Directory 				Staging Area			Local Repository 				Remote Repository
	d:
	
	index.html 		------------>   index.html	---------->	index.html_v1.0		------------->	index.html_v1.0
					  git add 					git commit 						git push
	
	
		git clone 			# Used to copy/clone the entire remote repository to local machine 
		
		git add				# Used to add the changes from working directory to staging area 
		
		git commit			# used to commit the changes from staging area to local repository
		
		git push 			# Used to push the changes from local repository to remote repository
		
		git pull/git fetch 	:
			- Both git pull & git fetch are used to handle the incremental changes from remote repository.
			
			GIT FETCH :
				It is used to just check for incremental changes in remote repository. If there are any changes exists, the information about that changes will be just updated in the local repository. git fetch will never update the changes in the working directory. 
				
			GIT PULL :
				It is used to check for incremental changes in remote repository. If there are any changes exists, the information about that changes will be updated in the local repository as well as the changes will be updated in the working directory. 				
				
		git init			# Used to Initialize/Create a Repository in Local Machine
							# It will create .git directory (GIT Directory!)
							# It will create a default branch called 'master' branch <master/main>
			
		Fork 				# Used to copy one remote repository to another remote repository
		
		
	Working with GIT Misc. Commands :::::
	
	GIT CLI :
	
		git --version 
	
	Folder Structure :
	
	Java_Developer:
	
	Java_Project_Folder - Workspace 
		src 
			*.java 
		test 
			*.java 
		target
			*.war 
		application.properties 
		Database_credentials
		
	Local Machine ::														
    
    Working Directory 				Staging Area				Local Repository
    d:
    
    file1.txt 		------------> 	 file1.txt   ---------->	 file1.txt(commit_id)
    				  git add 					 git commit 					
					  
	
	
	In Local Machine :::
	
	Open git bash terminal 
	
	cd d:
	mkdir Edu-PoW-July27
	cd Edu-PoW-July27
	mkdir project-repo1 
	cd project-repo1
	
	git init 

	git config --global user.name "Loksai"						# one time activity
			
	git config --global user.email "loksai@asdfasd.com"			# one time activity
			
	git status 
	
	echo "record" >> file1.txt 
	
	git add file1.txt 
	
	git commit -m "Commit_msg"
	
	git log 
	
	
	git config ::::			# Used to configure the user name and user email
							# User Name and User Email should be configured before the very first commit.
							# As a best practise, setup the user.name and user.email as a global config. 
	
		Local Configuration :
			- It is applicable within a repository
			
			git config user.name "Loksai"
			
			git config user.email "loksai@asdfasd.com"			
			
		
		Global Configuration :
			- It is applicable to all the repositories
			
			git config --global user.name "Loksai"
			
			git config --global user.email "loksai@asdfasd.com"
	

	git ls-files 			# To get the list of files tracked by git
	
	
	git add :::
	
			git add <file_name>
			
			git add <file1_name> <file2_name> 
			
			git add *.doc 
			
			git add .						# To add all the files to staging area
			
	
	git log :::
	
		git log --oneline 
		
		git log --oneline -1 
		
		git log --stat 
		
		git log -1
		
	
	git show <commit_id>
	
	
	git commit :::
	
		git commit -m "Commit_msg"
		
		# Commit message should be related to specific rel/cr 
		
		Release_Number 
		CR Number 
		
		git commit -m "CR082024 - Updated Payment.java" 
		
		
		git commit --amend -m "Valid Msg"		# Update just the commit message.
		

	Undo the Changes from Staging area
	- Unstaging!
	
	
		git rm --cached <file_name>  #Just remove from staging area. But the file will be available in working directory
	
		git rm -f <file_name>		 # To Permanently remove from staging area as well as from working directory
	
	
	git diff :::
	
		get the difference between the working directory and local repository
		
	
	.gitignore :::
	
		# It is used to ignore the files from tracking!
		
		
	Java_Project_Folder - Workspace 							===> remote repo
		src 
			*.java 
		test 
			*.java 
		target
			*.war 
		application.properties 
		Database_credentials	
		
		
	Create .gitignore file 
	
	add the file name / file pattern to be ignored 
	
	save and commit the .gitignore file 
	
	As a best practise, we .gitignore should be the very first commit in the repositories.
	

	
	Pre-Requisites :
		Lab Environments 
			AWS Cloud Platform to create VMs and install DevOps Tools
				- Create AWS Free Tier Account 	
				
		https://signin.aws.amazon.com/signup?request_type=register			==> To create new account 
				
		https://aws.amazon.com/console/										==> To login to aws console
	
	
		To Create AWS Free Tier Account :
			- Free Tier Account will be eligible for 12 Months 
		
			- Active Email_ID & Mobile_Number
			- Valid Credit/Debit Card - Enabled for International Transaction
			
			- Login to AWS Console as a root user : using Email_ID and Password 
		
		All Windows Users :
		
			Install SSH Agent - MobaXterm on Windows Machine  # To connect to Remote Servers
				https://mobaxterm.mobatek.net/download-home-edition.html
					- Select MobaXterm Installer Edition!
					- It download a zipfile 
					- Extract it
					- goto that extracted folder 
					- execute the exec file.
		
		Create dockerhub account : https://hub.docker.com
		
		Install Visual Studio Code : https://code.visualstudio.com/download

  501  git --version
  502  pwd
  503  clear
  504  cd d:
  505  mkdir Edu-PoW-July27
  506  cd Edu-PoW-July27/
  507  pwd
  508  mkdir project-repo1
  509  cd project-repo1/
  510  clear
  511  pwd
  512  cd ..
  513  ls
  514  mkdir project-repo2
  515  ls
  516  clear
  517  ls
  518  cd project-repo1
  519  clear
  520  git init
  521  ls
  522  ls -
  523  ls -a
  524  cd .git/
  525  ls
  526  clear
  527  ls
  528  cd ..
  529  ls
  530  clear
  531  git status
  532  ls
  533  echo "Hello"
  534  echo "record" >> file1.txt
  535  ls
  536  cat file1.txt
  537  clear
  538  git status
  539  git add file1.txt
  540  git status
  541  git commit -m "Created file1.txt"
  542  git log
  543  git config user.name "loksai"
  544  echo "rec1" >> file2.txt
  545  git add file2.txt
  546  git commit -m "Created file2.txt"
  547  git log
  548  cd ..
  549  ls
  550  cd project-repo2
  551  clear
  552  git init
  553  ls
  554  echo "rec1" >> file1.txt
  555  git add file1.txt
  556  git commit -m "Created file1.txt"
  557  git log
  558  clear
  559  git status
  560  ls
  561  git log
  562  clear
  563  echo "rec1" >> s1.txt
  564  git status
  565  ls
  566  git ls-files
  567  git add s1.txt
  568  ls
  569  git ls-files
  570  clear
  571  git commit -m "Created s1.txt"
  572  clear
  573  git log
  574  clear
  575  ls
  576  echo "rec1" >> q1.txt
  577  echo "rec1" >> q2.txt
  578  echo "rec1" >> q3.txt
  579  git status
  580  echo "rec1" >> a1.java
  581  echo "rec1" >> a2.java
  582  echo "rec1" >> a3.java
  583  echo "rec1" >> w1.md
  584  echo "rec1" >> w2.md
  585  echo "rec1" >> w3.md
  586  echo "rec1" >> e1.doc
  587  echo "rec1" >> e2.doc
  588  echo "rec1" >> e3.doc
  589  clear
  590  ls
  591  git status
  592  git add a1.java
  593  git status
  594  git add e1.doc w1.md
  595  git status
  596  git add *.doc q1.txt
  597  git status
  598  git add .
  599  git status
  600  git log
  601  git log --oneline
  602  git log -1
  603  git log -2
  604  git log
  605  git log --oneline -1
  606  git log --oneline -2
  607  git log --oneline -3
  608  git log
  609  git log --stat
  610  git log --stat -1
  611  git log --oneline
  612  git show a1eed86
  613  git log --oneline
  614  git show bcc9647
  615  clear
  616  git status
  617  git commit -m "Created some files"
  618  git status
  619  git log --oneline
  620  git show 600bfd9
  621  clear
  622  git log --oneline
  623  echo "rec1" >> k1.txt
  624  git add .
  625  git commit -m "kkjkjkhk"
  626  git log --oneline
  627  git commit -m "valid message"
  628  git log --oneline
  629  git commit --amend -m "Valid Msg"
  630  git log --oneline
  631  clear
  632  git log --oneline
  633  git status
  634  echo "rec1" >> dummyfile1.txt
  635  git status
  636  git add .
  637  git status
  638  git ls-files
  639  ls
  640  git status
  641  git rm --cached dummyfile1.txt
  642  git status
  643  git ls-files
  644  ls
  645  git status
  646  git add .
  647  clera
  648  clear
  649  ls
  650  git ls-files
  651  git rm -f dummyfile1.txt
  652  git status
  653  git ls-files
  654  ls
  655  git status
  656  cat file1.txt
  657  echo "rec2" >> file1.txt
  658  echo "rec2" >> file2.txt
  659  echo "rec2" >> file3.txt
  660  git add .
  661  cat file1.txt
  662  git commit -m "testing"
  663  ckear
  664  clear
  665  cat file1.txt
  666  echo "rec3" >> file1.txt
  667  git status
  668  git diff
  669  git commit -m "asdfas"
  670  git add .
  671  git commit -m "asdfas"
  672  clear
  673  cat file1.txt
  674  ehco "new record" > file1.txt
  675  echo "new record" > file1.txt
  676  cat file1
  677  cat file1.txt
  678  git diff
  679  git add .
  680  git commit -m "asdf"
  681  git diff
  682  clear
  683  cd ..
  684  ls
  685  mkdir project-repo3
  686  cd project-repo3
  687  clear
  688  git init
  689  vi .gitignore
  690  git status
  691  git add .
  692  git commit -m "Initial Commit - .gitignore"
  693  clear
  694  ls
  695  ls -a
  696  clear
  697  cat .gitignore
  698  ls
  699  echo "rec1" >> s1.java
  700  git status
  701  echo "rec1" >> sample1.txt
  702  git status
  703  echo "rec1" >> sample.txt
  704  git status
  705  ls
  706  cat .gitignore
  707  echo "rec1" >> a1.doc
  708  git status
  709  clear
  710  git status
  711  git add .
  712  git commit -m "asdf"
  713  clear
  714  git status
  715  history

Next ::

	git revert 
	
	git reset 
	
	git branches 
	
	git remote repository 
	
	

#######################
Day 3: 3rd Aug. 2024
#######################
	
	git revert 
	
	git reset 
	
	git branches 
	
	git remote repository 
	
	Local Machine ::														
    
    Working Directory 				Staging Area				Local Repository
    d:
    
    file1.txt 		------------> 	 file1.txt   ---------->	 file1.txt(commit_id)
    				  git add 					 git commit 					


	git reset :::
	
		- Is used to undo the committed changes.
		- It will bring the HEAD Pointer back to the previous commit point.
		- It will never create any new commit point to track the reset actions.
		- git reset is not recommended in the shared repositories
		
	
		syntax :
		
			git reset --<reset_option> <prev_commit_id>
			
			
			git reset --soft ::
			
				- git reset --soft : will bring the HEAD Pointer back to the previous commit point.
				- The changes made in the local repository will be removed from local repository and taken back to staging area.
				- The changes will be present in the staging area and working directory. 
				- It will never create any new commit point to track the reset actions.
				
				
				git reset --soft <prev_commit_id>
			
			
			git reset --mixed ::							# Default 
			
				- git reset --mixed : will bring the HEAD Pointer back to the previous commit point.
				- The changes made in the local repository will be removed from local repository as well as from the staging area.
				- But, the changes remains in the working directory as the untracked changes.
				- The changes will be present only in working directory. 
				- It will never create any new commit point to track the reset actions.
				
				git reset --mixed <prev_commit_id>			
				
				git reset <prev_commit_id>
			
			
			git reset --hard 
		
				- git reset --hard : will bring the HEAD Pointer back to the previous commit point.
				- The changes made in the local repository will be permanently removed from local repository, staging area as well as from the working directory.
				- It is permanent data loss.
				- It will never create any new commit point to track the reset actions.
				- It is not recommended in the shared repositories.
				
				git reset --hard <prev_commit_id>	
				
				
		 git ls-files			# Used to get the list of files that are being tracked by git.
		 

	git revert :::
	
		- git revert is same as git reset --hard.
		- only difference is git reset will not create any commit point for tracking. But git revert will create new commit point to track the changes.
		- Is used to undo the committed changes.
		- It will bring the HEAD Pointer back to the specific commit point.	
		
		
		syntax:
		
			git revert <specific_commit_id>
			
			
	git branches :::	
	
		- Used to enable parallel development 
		- Branch is the logical copy of the the repository(default branch)
		- master/main branch is considered as a default branch
		- master branch will be used to maintain the production version of the source code

		
	GIT Branching Strategies :::

		- It is used to enable parallel development without spoiling the integrity of master branch
		- To ensure the integrity of master branch is maintain at any point of time.


	Scenario 1: 
	
		Repo1:
			master : cm1,cm2,cm3
						cm1,cm2,cm3,fcm1,fcm2,fcm3															# upon merging changes from feature_Branch
			
				feature_Branch : cm1,cm2,cm3,fcm1,fcm2,fcm3
				
				
	Scenario 2: 
	
		Repo1:
			master : rel1,rel2,rel3
						rel1,rel2,rel3,rel4																	# rel4 is the changes merged from developer_branch
			
				developer_branch : rel1,rel2,rel3
									rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3						# Upon merging from feature1 and feature2
						
					feature1 : rel1,rel2,rel3
								rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
					
					feature2 : rel1,rel2,rel3 
								rel1,rel2,rel3,f2cm1,f2cm2,f2cm3	
								
	Scenario 3: 
	
		Repo1:
			master : rel1,rel2,rel3
						rel1,rel2,rel3,rel4																	# rel4 is the changes merged from integration_branch
						
				Integration_Branch : rel1,rel2,rel3
										rel1,rel2,rel3,developer1_changes,developer2_changes				# Upon merging from developer1 & developer2	
				
					developer1_branch : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
							
						feature1 : rel1,rel2,rel3
									rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
						
						feature2 : rel1,rel2,rel3 
									rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
									
					developer2_branch : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
							
						feature1 : rel1,rel2,rel3
									rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
						
						feature2 : rel1,rel2,rel3 
									rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
									
	Scenario 4: 
	
		Repo1:
			master : rel1,rel2,rel3
						rel1,rel2,rel3,rel4																	# rel4 is the changes merged from release_branch
			
				release_branch : rel1,rel2,rel3
									rel1,rel2,rel3,Team1_Changes,Team2_Changes
						
					Integration_Branch1 : rel1,rel2,rel3															#### Team1
											rel1,rel2,rel3,developer1_changes,developer2_changes				# Upon merging from developer1 & developer2	
					
						developer1_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
						developer2_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
										
					Integration_Branch2 : rel1,rel2,rel3															#### Team2
											rel1,rel2,rel3,developer1_changes,developer2_changes				# Upon merging from developer1 & developer2	
					
						developer1_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
						developer2_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
										
										
	Create Branches and working with branches!
	
	Create Repo
	
		make some commits 
		
		create new branch 
		
		
	repo1
	
		master : cm1,cm2,cm3 
		
			feature1 : cm1,cm2,cm3 
							cm1,cm2,cm3,f1cm1				# New commit in feature1
							
							git switch master				# Switch to target branch 
							
							git merge feature1				# Merge the changes from feature1. This should be executed from target branch.
			
			
		git branch 							# List the branches 
		
		git branch feature1					# Create a branch  & will not switch to feature1
		
		git checkout -b feature1			# Create a branch & switch to feature1
		
		git switch -c feature1				# Create a branch  & switch to feature1
		
		git switch master					# Switch to master branch 
		
	***Conflicts that might occur while working on parallel changes. 
	
	
	Merge Conflicts ::
	
		- Reason for Merge Conflicts :
			- Merge conflict will occur in the target branch, when more than one feature or user try to update the same file at the same record level.
			
		
		- How to resolve Merge Conflicts :
			1. Identify the file(s) causing the merge conflict 
			2. Open and review the content of that file
			3. Decide which feature changes to be deleted/retained from that file
			4. Delete the header and footer lines, and update the file content accordingly
			5. git add and git commit the changes on the target branch
			
		- Prevent the merge conflict using DevOps approach :
			As per DevOps process, collaborate and discuss/review the changes before merge.
			
			
	GIT way of preventing the conflicts in the target branch :
	
	git rebase ::
	
		- It is used to maintain the linear commit history 
		- git rebase is used to keep the current branch in-sync with traget branch.
		- It will prevent the merge conflict in the target branch 
		- As a best practise, It is always recommended to apply rebase before merge.
		- Using rebase if there is any merge conflict occurs, it will impact the current branch. NOT the target branch
		
	
		git rebase <target_branch_name>
		
		Repo1:
		
			master : cm1,cm2,cm3 
						cm1,cm2,cm3,f1cm1,f1cm2
						
						cm1,cm2,cm3,f2cm1,f2cm2,f1cm1,f1cm2				# Upon merging feature2 without proper rebase.
						
				feature1 : cm1,cm2,cm3
			
				feature2 : cm1,cm2,cm3	
			
		In general - without rebase ; 

		Repo1:			
			master : cm1,cm2,cm3 
			
				feature1 : cm1,cm2,cm3
							cm1,cm2,cm3,f1cm1,f1cm2
							
							git switch master 
							
							git merge feature1
				
				feature2 : cm1,cm2,cm3					
						cm1,cm2,cm3,f2cm1,f2cm2
							
							git switch master 
							
							git merge feature2
							
							
		Using Rebase ::

		Repo1:			
			master : cm1,cm2,cm3 
			
						cm1,cm2,cm3,f1cm1,f1cm2					# Upon updating Master Branch from feature1
						
						cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2		# Upon updating Master Branch from feature1 with proper rebase
			
				feature1 : cm1,cm2,cm3
							cm1,cm2,cm3,f1cm1,f1cm2		

								git rebase master 			# should executed from the current branch 
								
								git switch master 
								
								git merge feature1 			# should executed from the target branch

				
				feature2 : cm1,cm2,cm3					
							cm1,cm2,cm3,f2cm1,f2cm2


								git rebase master 			# should executed from the current branch 
								
									cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2
								
								git switch master 
								
								git merge feature1 			# should executed from the target branch
								
  501  cd d:
  502  ls
  503  cd Edu-PoW-July27/
  504  clear
  505  ls
  506  mkdir samplerepo1
  507  cd samplerepo1/
  508  clear
  509  ls
  510  git init
  511  ls -a
  512  git status
  513  clear
  514  echo "rec1" >> s1.txt
  515  git add .
  516  git commit -m "cm1"
  517  echo "rec1" >> s2.txt
  518  git add .
  519  git commit -m "cm2"
  520  echo "rec1" >> s3.txt
  521  git add .
  522  git commit -m "cm3"
  523  echo "rec1" >> s4.txt
  524  git add .
  525  git commit -m "cm4"
  526  echo "rec1" >> s5.txt
  527  git add .
  528  git commit -m "cm5"
  529  clear
  530  git status
  531  git log --oneline
  532  ls
  533  git ls-files
  534  echo "rec1" >> s6.txt
  535  ls
  536  git ls-files
  537  git add .
  538  git ls-files
  539  git commit -m "cm6"
  540  clear
  541  ls
  542  git ls-files
  543  git status
  544  git log --oneline
  545  git reset --soft 4de4320
  546  git status
  547  git ls-files
  548  ls
  549  git commit -m "cm6.1"
  550  git status
  551  ls
  552  git ls-files
  553  git log --oneline
  554  git reset --mixed 4de4320
  555  git status
  556  ls
  557  git ls-files
  558  git add .
  559  git commit -m "cm6.2"
  560  git log --oneline
  561  ls
  562  git ls-files
  563  git reset --hard 4de4320
  564  git status
  565  git ls-files
  566  ls
  567  git lg --oneline
  568  git log --oneline
  569  git reset --hard 035cfda
  570  git status
  571  git ls-files
  572  ls
  573  git log --oneline
  574  git reset --hard af0b942
  575  git log --oneline
  576  ls
  577  git ls-files
  578  git status
  579  git log --oneline
  580  clear
  581  ls
  582  git log --oneline
  583  echo "rec1" >> q1.txt
  584  git add .
  585  git commit -m "cm2"
  586  echo "rec1" >> q2.txt
  587  git add .
  588  git commit -m "cm3"
  589  echo "rec1" >> q3.txt
  590  git add .
  591  git log --oneline
  592  ls
  593  git commit -m "cm4"
  594  echo "rec1" >> q4.txt
  595  git add .
  596  git commit -m "cm5"
  597  clear
  598  git log --oneline
  599  ls
  600  git status
  601  git ls-files
  602  git show 6ce22fb
  603  git revert 6ce22fb
  604  ls
  605  git ls-files
  606  git status
  607  git log --oneline
  608  git show 7a08631
  609  ls
  610  git revert 7a08631
  611  git log --oneline
  612  git ls-files
  613  ls
  614  git status
  615  git log --oneline
  616  cd ..
  617  clear
  618  mkdir samplerepo2
  619  cd samplerepo2
  620  lear
  621  clear
  622  git init
  623  git branch
  624  echo "rec1" >> s1.txt
  625  git add .
  626  git commit -m "cm1"
  627  git branch
  628  echo "rec1" >> s2.txt
  629  git add .
  630  git commit -m "cm2"
  631  clear
  632  git log --oneline
  633  git branch
  634  git branch feature1
  635  git branch
  636  git log --oneline
  637  git branch feature2
  638  git branch
  639  git checkout -b feature3
  640  git branch
  641  git switch master
  642  git log --oneline
  643  git switch -c feature4
  644  git switch master
  645  clear
  646  git log --oneline
  647  git switch master
  648  git switch feature1
  649  git log --oneline
  650  ls
  651  echo "rec1" >> l1.txt
  652  git add .
  653  git commit -m "f1cm1"
  654  git status
  655  git log --oneline
  656  ls
  657  git switch master
  658  git log --oneline
  659  ls
  660  git merge feature1
  661  git status
  662  git log --oneline
  663  ls
  664  cd ..
  665  mkdir samplerepo3
  666  cd samplerepo3/
  667  git init
  668  clear
  669  echo "rec1" >> s1.txt
  670  git add .
  671  git commit -m "cm1"
  672  git branch
  673  git branch feature1
  674  git branch feature2
  675  git branch
  676  git log --oneline
  677  git switch feature1
  678  git log --oneline
  679  ls
  680  cat s1.txt
  681  echo "record2 from feature1" >> s1.txt
  682  cat s1.txt
  683  git add .
  684  git commit -m "f1cm1"
  685  git log --oneline
  686  cat s1.txt
  687  ls
  688  git switch master
  689  ls
  690  cat s1.txt
  691  git switch feature2
  692  ls
  693  cat s1.txt
  694  git log -oneline
  695  git log --oneline
  696  echo "record2 from feature2" >> s1.txt
  697  cat s1.txt
  698  ls
  699  git add .
  700  git commit -m "f2cm1"
  701  cat s1.txt
  702  git switch master
  703  clear
  704  git log --oneline
  705  ls
  706  cat s1.txt
  707  git merge feature1
  708  cat s1.txt
  709  ls
  710  git log --oneline
  711  git merge feature2
  712  clear
  713  git status
  714  cat s1.txt
  715  vi s1.txt
  716  git add .
  717  git commit -m "fixed conflict"
  718  git log --oneline
  719  cat s1
  720  cat s1.txt
  721  clear
  722  ls
  723  git log --oneline
  724  cd ..
  725  mkdir samplerepo4
  726  cd samplerepo4
  727  git init
  728  clear
  729  echo "rec1" >> s1.txt
  730  git add .
  731  git commit -m "cm1"
  732  echo "rec1" >> s2.txt
  733  git add .
  734  git commit -m "cm2"
  735  echo "rec1" >> s3.txt
  736  git add .
  737  git commit -m "cm3"
  738  clear
  739  git log --oneline
  740  git branch feature1
  741  git branch feature2
  742  git switch feature1
  743  git log --oneline
  744  ls
  745  echo "rec1" >> q1.txt
  746  git add .
  747  git commit -m "f1cm1"
  748  git rebase master
  749  git log --oneline
  750  git switch master
  751  git merge feature1
  752  git log --oneline
  753  ls
  754  git switch feature2
  755  git status
  756  git log --oneline
  757  echo "rec1" >> w1.txt
  758  git add .
  759  git commit -m "f2cm1"
  760  git rebase master
  761  git log --oneline
  762  ls
  763  git switch master
  764  git merge feature2
  765  ls
  766  git log --oneline
  767  git switch feature1
  768  git log --oneline
  769  ls
  770  git rebase master
  771  ls
  772  git log --oneline
  773  cat w1.txt
  774  history

Next :::
	
	git merge squash
	
	git stash 
	
	git remote repositories

	
######################
Day 4: 4th Aug. 2024
######################

	git merge squash
	
	git stash 
	
	git remote repositories
	
	Intro. to Jenkins Module

	
	git merge squash :::

		- Used to combine more than one commit and create one commit point out of it.
		
		
		Repo1:
			master : rel1 
						rel1,f1cm1,2,3,4,5,6,7,8,9,...............,100	# Upon merging from feature1 without squash option
						
						rel1,rel2										# Upon merging from feature1 with squash option
																		# rel2 is the combination of feature1 incremental changes
			
				feature1: rel1 
							rel1,f1cm1,2,3,4,5,6,7,8,9,...............,100
							
							git switch master 
							
							//git merge feature1
				
							git merge --squash feature1
	
	Scenario 4: 
	
		Repo1:
			master : rel1,rel2,rel3
						rel1,rel2,rel3,rel4																	# rel4 is the changes merged from release_branch
			
				release_branch : rel1,rel2,rel3
									rel1,rel2,rel3,Team1_Changes,Team2_Changes
						
					Integration_Branch1 : rel1,rel2,rel3															#### Team1
											rel1,rel2,rel3,developer1_changes,developer2_changes				# Upon merging from developer1 & developer2	
					
						developer1_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
						developer2_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
										
					Integration_Branch2 : rel1,rel2,rel3															#### Team2
											rel1,rel2,rel3,developer1_changes,developer2_changes				# Upon merging from developer1 & developer2	
					
						developer1_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
						developer2_branch : rel1,rel2,rel3
											rel1,rel2,rel3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3					# Upon merging from feature1 and feature2
								
							feature1 : rel1,rel2,rel3
										rel1,rel2,rel3,f1cm1,f1cm2,f1cm3	
							
							feature2 : rel1,rel2,rel3 
										rel1,rel2,rel3,f2cm1,f2cm2,f2cm3
										
										
	git cherry-pick :::
	
		- It is used merge the specific commit to the target branch 
		- As a best practise, git cherry-pick it is NOT recommended to use. 
		
		git cherry-pick <commit_id> <commit_id>
		
			Repo1: 
				master : cm1,cm2
				
					feature1 : cm1,cm2,f1cm1,f1cm2,f1cm3
					
					git switch master 
					
					//git merge feature1
					
					git cherry-pick f1cm2			# only f1cm2 commit will be merged into target branch.
					
					
	Hotfix Changes :::
	
		Repo1 :
		
			master : rel1,rel2
			
						rel1,rel2,rel2.1
						
				hotfix_branch : rel1,rel2,hfcm1,hfcm2,hfcm3
					
					
	
	git stash :::
	
		- It is used to save the uncommitted changes to a temporary area.
		- Stash is a Data Structure - List - LIFO 
	
	
		git stash save "message"				# Create a stash entry in the stash list 
		
		git stash list 							# Get the list of Stash entries 
		
		git stash apply 						# Is used to copy/apply the latest stashed entry back to the staging area
		git stash apply stash@{3}				# Is used to copy/apply the specific stashed entry back to the staging area
		
		git stash drop							# Is used to delete the latest stashed entry from the stash list
		git stash drop stash@{3}				# Is used to delete the specific stashed entry from the stash list
		
		git stash pop							# Is used to move the latest stashed entry back to the staging area
		git stash pop stash@{3}					# Is used to move the specific stashed entry back to the staging area
		
		git stash clear							# Used to clean-up the stash list
		
	
	git remote repositories :::
	
	
	GIT File Work flow :
	
	Local Machine ::																Remote Server 
	
	Working Directory 				Staging Area			Local Repository 				Remote Repository
	d:
	
	index.html 		------------>   index.html	---------->	index.html_v1.0		------------->	index.html_v1.0
					  git add 					git commit 						git push
		
		
		
	Remote Repository :

		Github :
		gitlab :
		azure Repo :
		AWS Code Commit :
		bitbucket :
		
	Developers' Workload :
	
		Enhancement/Bugfix Project 		# git clone first 
		
		New Project 					# git init 
		
		
	Enhancement/Bugfix Project  :::
	
		- Create remote repo.
		
		
		pull request : Created by the developers and submit for approval.
		

		git clone <clone_url>
		
		git clone https://github.com/Edu-DevOps-PoW-July27/TestRepo1.git


		git remote -v			# Used to get the list of remote repositories that are linked to the local repository
		


		git clone 			# Used to copy/clone the entire remote repository to local machine 
		
		git add				# Used to add the changes from working directory to staging area 
		
		git commit			# used to commit the changes from staging area to local repository
		
		git push 			# Used to push the changes from local repository to remote repository
		
		git pull/git fetch 	:
			- Both git pull & git fetch are used to handle the incremental changes from remote repository.
			
			GIT FETCH :
				It is used to just check for incremental changes in remote repository. If there are any changes exists, the information about that changes will be just updated in the local repository. git fetch will never update the changes in the working directory. 
				
			GIT PULL :
				It is used to check for incremental changes in remote repository. If there are any changes exists, the information about that changes will be updated in the local repository as well as the changes will be updated in the working directory. 	

				git pull = fetch + merge 
				
				
				
				
		git init			# Used to Initialize/Create a Repository in Local Machine
							# It will create .git directory (GIT Directory!)
							# It will create a default branch called 'master' branch <master/main>
			
	
	New Project ::
	
	git init 
	
	git add
	
	
	git commit 
	
	git remote add origin https://github.com/Edu-DevOps-PoW-July27/TestRepo2.git

	git remote -v 
	
	git remote remove origin	# To detach the remote repository from local repository
	
	- As a best practise, It is always recommended to use git pull before git push.

  871  cd Edu-PoW-July27/
  872  clear
  873  ls
  874  mkdir testrepo1
  875  cd testrepo1/
  876  git init
  877  echi "rec1" >> f1.txt
  878  echo "rec1" >> f1.txt
  879  git add .
  880  git commit - m "cm1"
  881  git commit -m "cm1"
  882  clear
  883  git log
  884  ls
  885  git switch -c feature1
  886  echo "rec" >> s1.txt
  887  git add .
  888  git commit -m "f1cm1"
  889  echo "rec" >> s2.txt
  890  git add .
  891  git commit -m "f1cm2"
  892  echo "rec" >> s3.txt
  893  git add .
  894  git commit -m "f1cm3"
  895  echo "rec" >> s4.txt
  896  git add .
  897  git commit -m "f1cm4"
  898  echo "rec" >> s4.txt
  899  git add .
  900  git commit -m "f1cm5"
  901  echo "rec" >> s5.txt
  902  git add .
  903  git commit -m "f1cm6"
  904  clear
  905  ls
  906  git log --oneline
  907  git switch master
  908  git log --oneline
  909  git merge --squash feature1
  910  git status
  911  git commit -m "cm2"
  912  git log --oneline
  913  ls
  914  git show 55d6c37
  915  clear
  916  git log --oneline
  917  ls
  918  git status
  919  git branch
  920  git branch feature2
  921  git branch feature3
  922  clear
  923  git switch feature2
  924  git log --oneline
  925  echo "rec1" >> g1.txt
  926  git add .
  927  echo "rec2" >> g1.txt
  928  echo "rec3" >> g1.txt
  929  git add .
  930  git status
  931  git switch master
  932  git status
  933  git switch feature2
  934  git status
  935  git switch feature3
  936  git status
  937  git switch feature2
  938  clear
  939  ls
  940  git status
  941  git stash save "for g1.txt"
  942  git status
  943  ls
  944  git stash list
  945  echo "rec1" >> g2.txt
  946  git add .
  947  git stash save "for g2.txt"
  948  echo "rec1" >> g3.txt
  949  git add .
  950  git stash save "for g3.txt"
  951  git add .
  952  git status
  953  git stash list
  954  echo "rec1" >> g4.txt
  955  git add .
  956  git stash save "for g4.txt"
  957  git stash list
  958  ls
  959  git status
  960  git stash apply
  961  ls
  962  git commit -m "created g4.txt"
  963  ls
  964  git status
  965  git stash list
  966  git stash drop
  967  git stash list
  968  echo "rec" >> k1.txt
  969  git add .
  970  git stash save "for k1.txt"
  971  echo "rec" >> k2.txt
  972  git add .
  973  git stash save "for k2.txt"
  974  echo "rec" >> k3.txt
  975  git add .
  976  ls
  977  git status
  978  git stash save "for k3.txt"
  979  git stash list
  980  git status
  981  git stash apply stash@{3}
  982  git stash list
  983  git stash drop stash@{3}
  984  git stash list
  985  git status
  986  git stash save "for g3.txt"
  987  git stash list
  988  git stash pop
  989  git stash list
  990  git status
  991  git stash save "for g3.txt"
  992  git stash
  993  git stash list
  994  git stash pop stash@{3}
  995  git stash list
  996  git commit -m "asdf"
  997  clear
  998  git status
  999  echo "rec1" >> w1.txt
 1000  git add .
 1001  echo "rec1" >> w2.txt
 1002  git add .
 1003  git status
 1004  git stash save "for w1 and w2"
 1005  git stash list
 1006  git status
 1007  git stash apply
 1008  git stash save "for w1 and w2"
 1009  git stash list
 1010  git stash list
 1011  git status
 1012  git stash clear
 1013  git stash list
 1014  git branch
 1015  clear
 1016  cd ..
 1017  mkdir remote-repos
 1018  cd remote-repos/
 1019  clear
 1020  git clone https://github.com/Edu-DevOps-PoW-July27/TestRepo1.git
 1021  ls
 1022  cd TestRepo1/
 1023  ls
 1024  clear
 1025  ls
 1026  git status
 1027  git remote -v
 1028  git branch
 1029  ls
 1030  git switch -c local-feature1
 1031  ls
 1032  ehco "rec1" >> local-file1.txt
 1033  echo "rec1" >> local-file1.txt
 1034  git add .
 1035  git commit -m "local_file1 created"
 1036  git log -oneline
 1037  git log --oneline
 1038  git push -u origin local-feature1
 1039  clear
 1040  git branch
 1041  git switch main
 1042  git status
 1043  git log --oneline
 1044  ls
 1045  git fetch
 1046  git status
 1047  git pull
 1048  ls
 1049  git status
 1050  ls
 1051  git log --oneline
 1052  clear
 1053  git status
 1054  git pull
 1055  ls
 1056  cd ..
 1057  clear
 1058  ls
 1059  mkdir testrepo2
 1060  cd testrepo2
 1061  git init
 1062  echo "rec1" >> file1.txt
 1063  git add .
 1064  git commit -m "initial commit"
 1065  clear
 1066  ls
 1067  git log
 1068  git remote -v
 1069  git branch -M main
 1070  git branch -M master
 1071  git remote add origin https://github.com/Edu-DevOps-PoW-July27/TestRepo2.git
 1072  git remote -v
 1073  git push -u origin master
 1074  git remote -v
 1075  clear
 1076  git remote -v
 1077  git remote remove origin
 1078  git remote -v
 1079  git remote add githubrepo1 https://github.com/Edu-DevOps-PoW-July27/TestRepo2.git
 1080  git remote -v
 1081  git remote add azurerepo1 https://github.com/Edu-DevOps-PoW-July27/TestRepo2.git
 1082  git remote -v
 1083  git push -u azurerepo1 master
 1084  clear
 1085  history
